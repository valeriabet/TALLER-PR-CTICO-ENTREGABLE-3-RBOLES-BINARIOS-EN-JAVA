public class ArbolBinario {
    Nodo raiz;

    // Constructor: al crear el árbol, su raíz está vacía (null)
    public ArbolBinario (){
        raiz = null;
    }

    // método para insertar un nodo con un indice y contenido 
    public void insertar(int i, Object contactos){
        Nodo n = new Nodo (i); // Crea un nuevo nodo con el índice dado
        n.contenido = contactos; //asigna el contenido al nodo

        // Si el árbol está vacío, el nuevo nodo se convierte en la raíz
        if(raiz == null){
            raiz = n;
        }

        else{
            Nodo aux = raiz;
            // Recorre el árbol para encontrar la posición correcta
            while (aux != null){
                n.padre = aux; // Guarda referencia al nodo padre actual
                // Si el índice del nuevo nodo es mayor o igual, ve a la derecha
                if(n.indice >= aux.indice){
                    aux = aux.derecha;
                }
                // Si es menor, ve a la izquierda
                else {
                    aux = aux.izquierda;
                }
            }
            // Una vez encontrada la posición (aux es vacio), se conecta el nuevo nodo al árbol
            if (n.indice < n.padre.indice){
                n.padre.izquierda = n;
            }
            else{
                n.padre.derecha = n;
            }
        }
    }
    }
            // Métodos de los recorridos del Arbol
            public void mostrarInOrden() {
                inOrden(raiz);
                System.out.println();
            }

            public void inOrden(Nodo nodo) {
                if (nodo != null) {
                inOrden(nodo.getIzquierdo());
                System.out.print(nodo.getDato() + " ");
                inOrden(nodo.getDerecho());
            }
            }

            public void mostrarPreOrden() {
                preOrden(raiz);
                System.out.println();
            }

            public void preOrden(Nodo nodo) {
                if (nodo != null) {
                System.out.print(nodo.getDato() + " ");
                preOrden(nodo.getIzquierdo());
                preOrden(nodo.getDerecho());
                }
                }

            public void mostrarPostOrden() {
                postOrden(raiz);
                System.out.println();
            }

            private void postOrden(Nodo nodo) {
                if (nodo != null) {
                postOrden(nodo.getIzquierdo());
                postOrden(nodo.getDerecho());
                System.out.print(nodo.getDato() + " ");
                }
                }
            // Método para buscar un nodo en el árbol
            public boolean contiene(int valor) {
                return buscar(raiz, valor);
            }
            public void buscarNodos(Nodo nodo, int valor){
                if (nodo == null) return false;
                if (nodo.getDato() == valor) return true;
    
            return valor < nodo.getDato()
                ? buscar(nodo.getIzquierdo(), valor)
                : buscar(nodo.getDerecho(), valor);
            }
            // Metodo para Mostrar la Altura del Arbol
            public void determinarAlturaArbol(){
                return calcularAltura(raiz);
            }
            private int alturaRec(Nodo nodo) {
                if (nodo == null) return 0;
                return 1 + Math.max(alturaRec(nodo.getIzquierdo), alturaRec(nodo.getDerecho));
            }
            //Metodo para Contar Nodos de las Hojas
            public int contarHojas() {
                return contarHojasRec(raiz);
            }
        
            private int contarHojasRec(Nodo nodo) {
                if (nodo == null) return 0;
                if (nodo.getIzquierdo == null && nodo.getDerecho == null) return 1;
                return contarHojasRec(nodo.getIzquierdo) + contarHojasRec(nodo.getDerecho);
            }

            //Metodo para Borrar un Nodo
            private Nodo eliminar(Nodo nodo, int valor) {
                if (nodo == null) return null;
                if (valor < nodo.valor) {
                    nodo.getIzquierdo = eliminar(nodo.getIzquierdo, valor);
                } else if (valor > nodo.valor) {
                    nodo.getDerecho = eliminar(nodo.getDerecho, valor);
                } else {
                    if (nodo.getDerecho == null) return nodo.getDerecho;
                    if (nodo.getDerecho == null) return nodo.getDerecho;
                    nodo.valor = valorMin(nodo.getDerecho);
                    nodo.getDerecho = eliminar(nodo.getDerecho, nodo.valor);
                }
                return nodo;
                }
                // Vacíar el Arbol
                ublic void limpiar() {
                raiz = null;
                }

                public Nodo getRaiz(){
                return raiz;
                }
